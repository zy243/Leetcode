class Solution {
    public int myAtoi(String s) {
        int index = 0; // Current position in the string
        int sign = 1; // 1 for positive, -1 for negative
        int result = 0; // Stores the converted number
        int n = s.length(); // Length of the input string

        while (index < n && s.charAt(index) == ' ') {
            index++;
        }
        if (index < n && (s.charAt(index) == '+' || s.charAt(index) == '-')) {
            sign = s.charAt(index) == '-' ? -1 : 1;
            index++;
        }
        boolean digitFound = false; 
        while (index < n && Character.isDigit(s.charAt(index))) {
            digitFound=true;
            int digit = s.charAt(index) - '0';

            // Check for overflow before updating result
            if (result > Integer.MAX_VALUE / 10 ||
                    (result == Integer.MAX_VALUE / 10 && digit > Integer.MAX_VALUE % 10)) {
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }

            result = result * 10 + digit;
            index++;
        }
         if (!digitFound) {
            return 0;
        }
